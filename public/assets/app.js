angular.module("app",["ngRoute","ui.router"]),angular.module("app").controller("adminCtrl",["$scope","$http",function(e,o){e.loading=!0,e.setup=function(){o.get("/api/users").then(function(o){e.model=o.data,e.loading=!1},function(e){})},e.setup()}]),angular.module("app").controller("loginCtrl",["$scope","auth","$location","$timeout",function(e,o,t,n){console.log("login controller"),e.authFail=!1,e.login=function(t,r){o.login(t,r).then(function(e){o.storeToken(e.data,function(){o.getUser().then(function(e){o.postLoginOps(e.data,function(){o.postLoginRouteHandler()})})})})["catch"](function(o){console.error("Gists error",o.status,o.data),401==o.status&&(e.authFail=!0,n(function(){e.authFail=!1},3e3))})["finally"](function(){console.log("finally finished gists")})}}]),angular.module("app").controller("masterCtrl",["$scope","$rootScope","$route",function(e,o,t){console.log("masterCtrl"),localStorage.getItem("logged_user")&&(o.currentUser=localStorage.getItem("logged_user")),e.$on("login",function(t,n){console.log("Logged In"),e.currentUser=n,o.currentUser=n,localStorage.setItem("logged_user",o.currentUser.username)})}]),angular.module("app").controller("registerCtrl",["$scope","auth","$location",function(e,o,t){e.register=function(n,r,l){o.register(n,r,l).then(function(n){o.login(r,l),e.$emit("login",n.data),t.path("/admin")})["catch"](function(e){console.log(e)})}}]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,o,t){o.otherwise("/"),e.state("app",{url:"/",views:{content:{templateUrl:"/landing.html",controller:"userRegisterCtrl"}}}).state("login",{url:"/login",views:{content:{templateUrl:"/login.html",controller:"loginCtrl"}}}).state("register",{url:"/efb82ec7a1a0e477a33e209dacd2a1e0",views:{content:{templateUrl:"/register.html",controller:"registerCtrl"}}}).state("admin",{url:"/admin",views:{content:{templateUrl:"/admin.html",controller:"adminCtrl"}}}),t.html5Mode(!0)}]),angular.module("app").controller("userRegisterCtrl",["$scope","$http",function(e,o){e.setup=function(){e.model={}},e.setup(),e.saveUser=function(){console.log("inside the func"),o.post("/api/users",{name:e.model.name,phone:e.model.phone,email:e.model.email}).then(function(o){console.log(o),$("#thanks").show().delay(5e3).fadeOut(),e.setup()},function(e){console.log(e)})},console.log("here in landing")}]),angular.module("app").service("auth",["$http","$window","$location","$rootScope",function(e,o,t,n){function r(){return e.get("api/admin")}function l(o,t){return e.post("api/sessions",{username:o,password:t})}function a(o,t,n){return e.post("api/admin",{name:o,username:t,password:n})}function i(){localStorage.removeItem("user_token"),localStorage.removeItem("logged_user"),delete e.defaults.headers.common["x-auth"],n.isLogged=!1,n.currentUser=null,t.path("/login")}function s(t,n){o.sessionStorage.user_token=t,localStorage.setItem("user_token",t),e.defaults.headers.common["x-auth"]=o.sessionStorage.user_token,n&&"function"==typeof n&&n()}function u(){}function c(e,o){n.currentUser=e.name,localStorage.setItem("logged_user",n.currentUser),n.isLogged=!0,o&&"function"==typeof o&&o()}function g(){n.intendedRoute?t.path(n.intendedRoute):t.path("/admin")}return{getUser:r,login:l,register:a,logout:i,storeToken:s,isLogged:u,postLoginOps:c,postLoginRouteHandler:g}}]);
//# sourceMappingURL=data:application/json;base64,
